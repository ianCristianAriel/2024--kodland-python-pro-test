# Importaci√≥n de librer√≠as del sistema
import os
import re

# Importaci√≥n de librer√≠as especializadas
from dotenv import load_dotenv
import discord
from discord.ext import commands
import wikipedia
import pandas as pd

path_dataset = 'data/row/users_queries.csv'

if os.path.isfile(path_dataset):
    df_queries = pd.read_csv(path_dataset)
else:
    df_queries = pd.DataFrame(columns=['Usuario','Consulta'])

# Cargar variables de entorno
load_dotenv()
# Constante que almacena el token para acceder al bot
BOT_TOKEN = os.getenv('TOKEN_BOT')

# Aqui se configuran los intents con los permisos de acceso
intents = discord.Intents.default() # Por defecto se establecen todos en 'False'
intents.message_content = True  # Se habilita el acceso al contenido de los mensajes
intents.members = True  # Se habilita el acceso a los eventos relacionados con los miembros

# Aqui se crea la instancia del bot con el prefijo y la instancia con los intents necesarios
bot = commands.Bot(command_prefix="!", intents=intents)

def elimina_signos_inecesarios(resultado):
    '''
    Elimina signos inecesarios del resultado arrojado por wWikipedia.

    Args:
        resultado (str): Resultado retornado por la funcion que busca en Wikipedia.

    Returns:
        Str: Retorna el resultado sin los signos inecesarios.
    '''
    expression_regular = "\[[^]]*\]"
    patron_regular = re.compile(expression_regular)
    resultado = patron_regular.sub('', resultado)
    return resultado

# Funcion para la busqueda en wikipedia
def buscar_wikipedia(consulta):
    """
    Busca un resumen de un art√≠culo en Wikipedia en espa√±ol.

    Args:
        consulta (str): El t√©rmino de b√∫squeda proporcionado por el usuario en Discord.

    Returns:
        str: Un resumen del art√≠culo de Wikipedia si se encuentra.
             En caso de ambig√ºedad, devuelve un mensaje solicitando m√°s especificidad.
             Si no se encuentra ning√∫n art√≠culo, devuelve un mensaje indic√°ndolo.
             Captura otros errores y los reporta al usuario.
    """
    try:
        wikipedia.set_lang("es")  # Establece el idioma de b√∫squeda en espa√±ol
        resultado = wikipedia.summary(consulta, sentences=4)
        resultado = elimina_signos_inecesarios(resultado)
        return resultado
    except wikipedia.exceptions.DisambiguationError:
        return f"La b√∫squeda '{consulta}' es ambigua. Por favor, s√© m√°s espec√≠fico."
    except wikipedia.exceptions.PageError:
        return f"No se encontr√≥ ning√∫n art√≠culo relacionado con '{consulta}' en Wikipedia."
    except Exception:
        return "Error al realizar la b√∫squeda en Wikipedia."

# Evento encargado de detectar cuando el bot esta funcionando
@bot.event
async def on_ready():
    """
    Evento que se ejecuta cuando el bot est√° listo.
    Establece la presencia del bot y lo marca como activo.
    """
    print(f"Bot {bot.user.name} is ready.")
    await bot.change_presence(activity=discord.Game(name="!pomoc"))

# evento encargado de detectar un nuevo usuario
@bot.event
async def on_member_join(member):
    # Obtengo la info canal
    channel = discord.utils.get(member.guild.text_channels, name="general")
    
    # Si el canal existe, se envia el mensaje de bienvenida personalizado
    if channel:
        await channel.send(f"¬°Bienvenido/a {member.mention} al servidor! üéâ")

# Se define comando con el que se llamara a la funcion de buscar en wikipedia
@bot.command()
async def wiki(ctx, *, consulta):
    global df_queries
    usuario_consulta = ctx.author.name
    nueva_fila = pd.DataFrame({'Usuario':[usuario_consulta], 'Consulta':[consulta]})
    df_queries = pd.concat([df_queries, nueva_fila], ignore_index=True)
    df_queries.to_csv(path_dataset, index=False)
    resultado = buscar_wikipedia(consulta)
    await ctx.send(resultado)

# Se realiza la ejecucion del bot
bot.run(BOT_TOKEN)